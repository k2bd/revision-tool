{"version":3,"sources":["components/Topic.tsx","data.ts","components/Section.tsx","store/actionTypes.ts","store/actionCreators.ts","App.tsx","store/reducer.ts","index.tsx"],"names":["Topic","topic","interactive","elevation","Elevation","ONE","name","SECTION_A","SECTION_B","SECTION_C","availableIssues","sectionTitle","Section","section","newTopics","dispatch","useDispatch","displayTopics","topics","map","useState","showingAllTopics","setShowingAllTopics","newTopicsDispatch","React","allTopicsDisplay","title","ZERO","className","icon","text","onClick","isOpen","classNames","Classes","OVERLAY_SCROLL_CONTAINER","onClose","GET_RANDOM_ISSUES","getRandomIssues","random_issues_action","type","actionTypes","App","allSections","useSelector","state","sections","shallowEqual","useCallback","displaySections","align","Alignment","LEFT","forEach","style","display","gridTemplateColumns","gridGap","initialState","random_issues_for_section","action","a","sort","Math","random","value","b","slice","newSections","reducer","store","createStore","applyMiddleware","thunk","rootElement","document","getElementById","render"],"mappings":"+MAWaA,EAAyB,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACpC,OACI,cAAC,IAAD,CAAMC,aAAa,EAAOC,UAAWC,IAAUC,IAA/C,SACI,4BAAIJ,EAAMK,U,uBCdTC,EAAY,oBACZC,EAAY,eACZC,EAAY,mBAGZC,EAAkB,SAACC,GAC5B,OAAOA,GACH,KAAKJ,EACD,MAAO,CACH,mBACA,2BACA,iBACA,oDACA,WACA,oBACA,0BACA,2BACA,iBACA,eACA,8BACA,QACA,yBACA,gCACA,6BACA,UACA,4BACA,iBACA,0BACA,mBACA,qBACA,sBACA,2CACA,iBACA,WACA,kBACA,0BACA,SACA,sBACA,SACA,YACA,qBACA,eACA,SACA,QACA,YACA,WACA,4BACA,oBACA,yBACA,qBACA,qCACA,0BACA,gCAER,KAAKC,EACD,MAAO,CACH,iDACA,6GACA,6DACA,sDACA,+EACA,yBACA,2EACA,wHACA,6DACA,MACA,qGACA,kIACA,MACA,aACA,mHACA,sDACA,0FACA,2CACA,qIACA,4FACA,4CACA,gCACA,wBACA,qBACA,sBACA,oFACA,gEACA,uFACA,cACA,yEACA,mBACA,kEACA,gFACA,cACA,4CACA,iDACA,2HAER,KAAKC,EACD,MAAO,CACH,6BACA,6BACA,oBACA,gBACA,YACA,0BACA,wBACA,eACA,qBACA,YACA,SACA,oBACA,sBACA,WACA,sBACA,mBACA,+FACA,qBACA,oBACA,yBACA,cACA,qHACA,aACA,yGACA,uBACA,2BACA,mBACA,WACA,sGACA,WACA,cACA,eACA,8BACA,cACA,cACA,mBACA,YACA,cACA,0GACA,yFACA,eACA,2BACA,4FAGZ,KAAM,wBC7HGG,EAA2B,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,UACzCC,EAA0BC,cAE1BC,EAAgBJ,EAAQK,OAAOC,KACjC,SAAClB,GAAD,OACI,cAAC,EAAD,CAAOA,MAAOA,OALwC,EASdmB,oBAAS,GATK,mBASvDC,EATuD,KASrCC,EATqC,KAWxDC,EAAoBC,eACtB,SAACX,GAAD,OAAuBE,EAASD,EAAUD,MAC1C,CAACE,EAAUD,IAGTW,EAAmBf,EAAgBG,EAAQa,OAAOP,KACpD,SAACb,GAAD,OACI,4BAAIA,OAIZ,OACI,gCACI,eAAC,IAAD,CAAMJ,aAAa,EAAOC,UAAWC,IAAUuB,KAA/C,UACI,qBAAKC,UAAU,OAAf,SACI,cAAC,IAAD,CACIC,KAAK,UACLC,KAAMjB,EAAQa,MACdK,QAAS,kBAAMR,EAAkBV,QAGxCI,EACD,cAAC,IAAD,CAAQa,KAAK,kBAAkBC,QAAS,kBAAMT,GAAoB,SAEtE,cAAC,IAAD,CACIU,OAAQX,EACRO,UAAWK,IAAWC,IAAQC,0BAC9BC,QAAS,kBAAKd,GAAoB,IAHtC,SAKI,cAAC,IAAD,UAAOG,UCxDVY,EAAoB,oBCG1B,SAASC,EAAgBzB,GAC5B,IAAM0B,EAAuC,CACzCC,KAAMC,EACN5B,QAASA,EACTZ,MAAO,MAGX,OAAO,SAACc,GACJA,EAASwB,I,YCmDFG,EApDO,WAClB,IAAM3B,EAA0BC,cAE1B2B,EAAmCC,aACrC,SAACC,GAAD,OAA0BA,EAAMC,WAChCC,KAGExB,EAAoBC,IAAMwB,aAC5B,SAACnC,GAAD,OAAuBE,EAASuB,EAAgBzB,MAChD,CAACE,EAAUuB,IAGTW,EAAkBN,EAAYxB,KAChC,SAACN,GAAD,OACI,cAAC,EAAD,CACIA,QAASA,EACTC,UAAWwB,OAavB,OACI,gCACI,8BACI,cAAC,IAAD,UACI,eAAC,IAAD,CAAaY,MAAOC,IAAUC,KAA9B,UACI,cAAC,IAAD,6BACA,cAAC,IAAD,IACA,cAAC,IAAD,CACIvB,KAAK,UACLC,KAAK,aACLC,QAlBF,WAClBY,EAAYU,SACR,SAACxC,GACGU,EAAkBV,gBAoBtB,qBAAKyC,MAAO,CAAEC,QAAS,OAAQC,oBAAqB,iBAAkBC,QAAS,IAA/E,SACKR,Q,gBClDXS,EAA8B,CAChCZ,SAAU,CACN,CACIpB,MAAOnB,EACPW,OAAQ,IAEZ,CACIQ,MAAOlB,EACPU,OAAQ,IAEZ,CACIQ,MAAOjB,EACPS,OAAQ,MAMdyC,EAA4B,SAACC,EAAwBf,GACvD,IAEI/B,EAFkB,YAAOJ,EAAgBkD,EAAO/C,QAAQa,QAGvDP,KAAI,SAAC0C,GAAD,MAAQ,CAACC,KAAMC,KAAKC,SAAUC,MAAOJ,MACzCC,MAAK,SAACD,EAAGK,GAAJ,OAAUL,EAAEC,KAAOI,EAAEJ,QAC1B3C,KAAI,SAAC0C,GAAD,MAAQ,CAACvD,KAAMuD,EAAEI,UACrBE,MAAM,EAAG,GAEVC,EAAcvB,EAAMC,SAAS3B,KAC7B,SAACN,GACG,OAAIA,EAAQa,OAASkC,EAAO/C,QAAQa,MACzB,2BACAb,GADP,IAEIK,OAAQJ,IAGLD,KAKnB,OAAO,2BACAgC,GADP,IAEIC,SAAUsB,KAgBHC,EAXC,WAGK,IAFjBxB,EAEgB,uDAFOa,EACvBE,EACgB,uCAChB,OAAOA,EAAOpB,MACV,KAAKC,EACD,OAAOkB,EAA0BC,EAAQf,GAEjD,OAAOA,GC/CLyB,G,qBAEFC,YAAYF,EAASG,YAAgBC,OAGnCC,EAAcC,SAASC,eAAe,QAC5CC,iBACI,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJI,K","file":"static/js/main.1dcbf519.chunk.js","sourcesContent":["import * as React from \"react\"\nimport { Dispatch } from \"redux\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\nimport { Card, Elevation } from \"@blueprintjs/core\"\n\n\ntype Props = {\n    topic: ITopic,\n}\n\n\nexport const Topic: React.FC<Props> = ({topic}) => {\n    return (\n        <Card interactive={false} elevation={Elevation.ONE}>\n            <p>{topic.name}</p>\n        </Card>\n    )\n}\n","export const SECTION_A = \"Neurodegeneration\"\nexport const SECTION_B = \"Neuroimaging\"\nexport const SECTION_C = \"Neurodevelopment\"\n\n\nexport const availableIssues = (sectionTitle: string) => {\n    switch(sectionTitle) {\n        case SECTION_A:\n            return [\n                \"Alpha- synuclein\",\n                \"Alzheimer’s Disease\",\n                \"APP processing\",\n                \"Astroglial hypothesis of Alzheimer’s Disease\",\n                \"FUS gene\",\n                \"Misfolded protein\",\n                \"Neurofibrillary tangles\",\n                \"Parkinson’s disease\",\n                \"Prion Diseases\",\n                \"Tau protein \",\n                \"The amyloid beta hypothesis\",\n                \"APOE4\",\n                \"Adeno-associated virus\",\n                \"Amyotrophic lateral sclerosis\",\n                \"Antisense olgionucleotides\",\n                \"C9ORF72\",\n                \"Dipeptide repeat proteins\",\n                \"Fasciculations\",\n                \"Frontotemporal dementia\",\n                \"Fused in sarcoma\",\n                \"Haploinsufficiency\",\n                \"Lower motor neurone\",\n                \"Intracellular protein clearance pathways\",\n                \"Q331K mutation\",\n                \"RNA foci\",\n                \"Stress granules\",\n                \"Superoxide dismutase 1 \",\n                \"TDP-43\",\n                \"Upper motor neurone\",\n                \"Ataxia\",\n                \"Autophagy\",\n                \"Autosomal dominant\",\n                \"Bradykinesia\",\n                \"Chorea\",\n                \"DRPLA\",\n                \"Dysphagia\",\n                \"Dystonia\",\n                \"Huntington’s disease\",\n                \"Neurodegeneration\",\n                \"Polyglutamine diseases\",\n                \"Protein aggregates\",\n                \"Spinal and bulbar muscular atrophy\",\n                \"Spinocerebellar ataxias\",\n                \"Ubiquitin proteosome system \",\n            ]\n        case SECTION_B:\n            return [\n                \"Amphetamine – can be used to treat ADHD. \",\n                \"Apparent diffusion coefficient- the diffusion rate of water molecules in a tissue, as calculated with MRI \",\n                \"Arterial spin labelling- measure cerebral blood perfusion \",\n                \"BOLD signal- measures oxygen consumption with MRI. \",\n                \"Cerebral blood flow- a critical marker in determining BOLD response in MRI. \",\n                \"Cognitive neuroscience\",\n                \"Diffusion weighted imaging – the method to generate images in MRI. \",\n                \"Electroencephalography- the electrical activity of the cortex in poor spatial resolution but high temporal resolution\",\n                \"Magnetic resonance angiography- MRI used for blood vessels\",\n                \"MRI\",\n                \"Magnetoencephalography- the electrical activity of neurons- high temporal and spatial resolution. \",\n                \"Near-infrared spectroscopy imaging- monitors brain activity via changes in haemoglobin concentration, people can move with it. \",\n                \"PET\",\n                \"Ultrasound\",\n                \"Venogram or venography- diagnose health conditions of veins- only really used for detecting deep vein thrombosis\",\n                \"Fourier transformation- used to acquire MRI signal.\",\n                \"Functional neuroimaging- with the goal of finding the function of different brain areas\",\n                \"Granger causality- a statistical concept\",\n                \"Haemodynamic response- the way that the body rapidly delivers blood to active neuronal tissue, utilised in functional neuroimaging\",\n                \"Machine learning- useful in modelling highly dimensional datasets- such as image analysis\",\n                \"Pre-processing- removes noise from data. \",\n                \"Pulse-sequence- used in MRI. \",\n                \"Signal to noise ratio\",\n                \"Spatial resolution\",\n                \"Temporal resolution\",\n                \"Transcranial magnetic stimulation- a technique for non-invasive brain stimulation\",\n                \"Voxel based morphometry- measures brain tissue concentration \",\n                \"Dose optimisation- to obtain maximal therapeutic benefit and minimal adverse effects\",\n                \"Drug effect\",\n                \"Occupancy- the fraction of receptors linked to their endogenous ligand\",\n                \"Pharmacodyanmics\",\n                \"Pharmokinetics- absorption, distribution, metabolism, excretion\",\n                \"Pharmacological imaging- any imaging technique to understand drug metabolism \",\n                \"Radioligand\",\n                \"Receptor density- can be measured via PET\",\n                \"Receptor availability- usually mapped with PET\",\n                \"Tractography- a 3D modelling technique providing a computational reconstruction of in vivo nerve tracts                \",\n            ]\n        case SECTION_C:\n            return [\n                \"Cortical GABAergic neurons\",\n                \"Cortical plate development\",\n                \"Intermediate zone\",\n                \"Marginal zone\",\n                \"Neocortex\",\n                \"Neural progenitor cells\",\n                \"Neuroepithelial cells\",\n                \"Neurogenesis\",\n                \"Neuronal migration\",\n                \"Pre-plate\",\n                \"Reelin\",\n                \"RELN-Dab1 pathway\",\n                \"Somal translocation\",\n                \"Subplate\",\n                \"Subventricular zone\",\n                \"Ventricular zone\",\n                \"Areal diversity- the neural differences depending on the specific area of the cortical sheet\",\n                \"Fate determination\",\n                \"French flag model\",\n                \"Histological diversity\",\n                \"Interneuons\",\n                \"Laminar diversity- withint the 6 neocortical layers and the 3 layers of phylogeneitcally older parts of the cortex\",\n                \"Morphogens\",\n                \"Neuronal birth-dating – to determine the route/rate of cell migration- where a cell has come from\",\n                \"Neuronal development\",\n                \"Positional specification\",\n                \"Progenitor cells\",\n                \"Blastula\",\n                \"Conditional specification- how a cells fate can be determined by certain conditions such as psoiton\",\n                \"Ectoderm\",\n                \"Floor plate\",\n                \"Gastrulation\",\n                \"Midbrain-hindbrain boundary\",\n                \"Neural tube\",\n                \"Neuralation\",\n                \"Nieuwkoop centre\",\n                \"Notochord\",\n                \"Rhombomeres\",\n                \"Somites- blocks of mesoderm situated along the notochord that go on to form muscle, skeleton and skin. \",\n                \"Sonic hedgehog- important for ventral to dorsal patterning- highest in ventral areas. \",\n                \"Specificatio\",\n                \"Spemann’s organiser\",\n                \"Wnt- a posteriorizing signal- a shift from forebrain to hindbrain fate.                 \",\n            ]\n    }\n    throw \"Invalid section name\"\n}\n","import * as React from \"react\"\nimport { Dispatch } from \"redux\"\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\"\nimport { Topic } from \"./Topic\"\nimport { Button, Card, Classes, Elevation, Overlay } from \"@blueprintjs/core\"\nimport classNames from \"classnames\"\nimport { useState } from \"react\"\nimport {availableIssues} from \"../data\"\n\n\ntype Props = {\n    section: ISection,\n    newTopics: (section: ISection) => void,\n}\n\n\nexport const Section: React.FC<Props> = ({section, newTopics}) => {\n    const dispatch: Dispatch<any> = useDispatch()\n\n    const displayTopics = section.topics.map(\n        (topic: ITopic) => (\n            <Topic topic={topic} />\n        )\n    )\n\n    const [showingAllTopics, setShowingAllTopics] = useState(false)\n\n    const newTopicsDispatch = React.useCallback(\n        (section: ISection) => dispatch(newTopics(section)),\n        [dispatch, newTopics]\n    )\n\n    const allTopicsDisplay = availableIssues(section.title).map(\n        (name: string) => (\n            <p>{name}</p>\n        )\n    )\n\n    return (\n        <div>\n            <Card interactive={false} elevation={Elevation.ZERO}>\n                <div className='rowC'>\n                    <Button\n                        icon=\"refresh\"\n                        text={section.title}\n                        onClick={() => newTopicsDispatch(section)}\n                    />\n                </div>\n                {displayTopics}\n                <Button text=\"Show All Topics\" onClick={() => setShowingAllTopics(true)}/>\n            </Card>\n            <Overlay\n                isOpen={showingAllTopics}\n                className={classNames(Classes.OVERLAY_SCROLL_CONTAINER,)}\n                onClose={()=> setShowingAllTopics(false)}\n            >\n                <Card>{allTopicsDisplay}</Card>\n            </Overlay>\n        </div>\n    )\n}\n","export const GET_RANDOM_ISSUES = \"GET_RANDOM_ISSUES\"\n","import * as actionTypes from \"./actionTypes\"\n\n\nexport function getRandomIssues(section: ISection) {\n    const random_issues_action: RevisionAction = {\n        type: actionTypes.GET_RANDOM_ISSUES,\n        section: section,\n        topic: null,\n    }\n\n    return (dispatch: DispatchType) => {\n        dispatch(random_issues_action)\n    }\n}\n","import React from 'react';\nimport { useSelector, shallowEqual, useDispatch } from \"react-redux\"\nimport { Dispatch } from \"redux\"\n\nimport { Section } from './components/Section';\nimport { getRandomIssues } from './store/actionCreators';\n\nimport { Alignment, Button, Navbar, NavbarDivider, NavbarGroup, NavbarHeading } from \"@blueprintjs/core\";\n\n\nconst App: React.FC = () => {\n    const dispatch: Dispatch<any> = useDispatch()\n\n    const allSections: readonly ISection[] = useSelector(\n        (state: RevisionState) => state.sections,\n        shallowEqual\n    )\n\n    const newTopicsDispatch = React.useCallback(\n        (section: ISection) => dispatch(getRandomIssues(section)),\n        [dispatch, getRandomIssues]\n    )\n\n    const displaySections = allSections.map(\n        (section: ISection) => (\n            <Section\n                section={section}\n                newTopics={getRandomIssues}\n            />\n        )\n    )\n\n    const refreshTopics = () => {\n        allSections.forEach(\n            (section: ISection) => {\n                newTopicsDispatch(section)\n            }\n        )\n    }\n\n    return (\n        <div>\n            <div>\n                <Navbar>\n                    <NavbarGroup align={Alignment.LEFT}>\n                        <NavbarHeading>Test Simulator</NavbarHeading>\n                        <NavbarDivider />\n                        <Button\n                            icon=\"refresh\"\n                            text=\"New Topics\"\n                            onClick={refreshTopics}\n                        />\n                    </NavbarGroup>\n                </Navbar>\n            </div>\n            <div style={{ display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gridGap: 20 }}>\n                {displaySections}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ALERT_BODY } from \"@blueprintjs/core/lib/esm/common/classes\"\nimport { isLiteralTypeNode } from \"typescript\"\nimport * as actionTypes from \"./actionTypes\"\nimport {SECTION_A, SECTION_B, SECTION_C, availableIssues} from \"../data\"\n\n\nconst initialState: RevisionState = {\n    sections: [\n        {\n            title: SECTION_A,\n            topics: [],\n        },\n        {\n            title: SECTION_B,\n            topics: [],\n        },\n        {\n            title: SECTION_C,\n            topics: [],\n        },\n    ]\n}\n\n\nconst random_issues_for_section = (action: RevisionAction, state: RevisionState) => {\n    const available_issues = [...availableIssues(action.section.title)]\n\n    let newTopics: ITopic[] = available_issues\n        .map((a) => ({sort: Math.random(), value: a}))\n        .sort((a, b) => a.sort - b.sort)\n        .map((a) => ({name: a.value}))\n        .slice(0, 5)\n\n    let newSections = state.sections.map(\n        (section: ISection) => {\n            if (section.title == action.section.title) {\n                return {\n                    ...section,\n                    topics: newTopics,\n                }\n            } else {\n                return section\n            }\n        }\n    )\n\n    return {\n        ...state,\n        sections: newSections,\n    }\n}\n\n\nconst reducer = (\n    state: RevisionState = initialState,\n    action: RevisionAction,\n): RevisionState => {\n    switch(action.type) {\n        case actionTypes.GET_RANDOM_ISSUES:\n            return random_issues_for_section(action, state)\n    }\n    return state\n}\n\nexport default reducer\n","import * as React from \"react\"\nimport { render } from \"react-dom\"\nimport {createStore, applyMiddleware, Store} from \"redux\"\nimport { Provider } from \"react-redux\"\nimport thunk from \"redux-thunk\"\n\nimport App from \"./App\"\nimport reducer from \"./store/reducer\"\n\nimport \"normalize.css\"\nimport \"@blueprintjs/core/lib/css/blueprint.css\"\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\"\n\n\nconst store: Store<RevisionState, RevisionAction> & {\n    dispatch: DispatchType\n} = createStore(reducer, applyMiddleware(thunk))\n\n\nconst rootElement = document.getElementById(\"root\")\nrender(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n)\n"],"sourceRoot":""}